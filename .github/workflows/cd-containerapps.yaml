#
# Deploy to Azure Container Apps
# 
#

name: CD ACA

on:
  workflow_dispatch:
    inputs:  
        IMAGE_TAG:
          description: "Image tag to be deployed"
          required: true
          default: "09-05-2022.2113"

env:
  LOCATION: westeurope
  ACR_REPO: ${{ secrets.REGISTRY_LOGIN_SERVER }}/dotnet6 
  RG: ${{ secrets.AZURE_RG }}
  ACA_NAME: ${{ secrets.REGISTRY_USERNAME }}-containerapp
  

jobs:
  #
  # Deploy Azure Container App
  #
  deploy-azure-green:
    name: Deploy Azure Container App to Azure Resource Group
    runs-on: ubuntu-latest
    # environment:
    #   name: AKS
    #output for next job
    outputs:
      LatestRevision: ${{ steps.get-latest-aca-revision.outputs.LatestRevision }}
      FirstDeployment: ${{ steps.first-deployment.outputs.FirstDeployment }}

    steps:

    # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  

      #does the cluster exist, first deployment detect
    - name: Get first deployment BOOL
      uses: azure/CLI@v1
      id: first-deployment
      with:
        azcliversion: 2.35.0
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          empty_answer=[]
          check=$(az containerapp list --query "[?name=='$ACA_NAME']")
          [ $check==$empty_answer ] && FirstDeployment=true || FirstDeployment=false
          echo "FirstDeployment=$FirstDeployment" >> $GITHUB_ENV
          echo "::set-output name=FirstDeployment::$FirstDeployment"

    - name: Get latest ACA REVISION
      uses: azure/CLI@v1
      id: get-latest-aca-revision
      if: steps.first-deployment.outputs.FirstDeployment == 'false'
      with:
        azcliversion: 2.35.0
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          LatestRevision=$(az containerapp revision list -n $ACA_NAME -g $RG --query "[?properties.trafficWeight ==\`100\`][].name" --output tsv)
          echo "LatestRevision=$LatestRevision" >> $GITHUB_ENV
          echo "::set-output name=LatestRevision::$LatestRevision"

    - name: ECHO previous REVISION
      if: steps.first-deployment.outputs.FirstDeployment == 'false'
      run: |
        echo "LatestRevision=$LatestRevision"      

      # Deploy Bicep file (existing cluster)
    - name: deploy
      #if: github.event.inputs.SKIP_INFRA == 'No'
      uses: azure/arm-deploy@v1
      if: steps.first-deployment.outputs.FirstDeployment == 'false'
      id: deploy
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.RG }}
        template: deploy/bicep/container-app.bicep
        parameters: image=${{env.ACR_REPO}}:${{ github.event.inputs.IMAGE_TAG }} acrServer=${{ secrets.REGISTRY_LOGIN_SERVER }} acrPassword=${{ secrets.REGISTRY_PASSWORD }}  acrUsername=${{ secrets.REGISTRY_USERNAME }}  newRevisionNumber=${{ github.run_number }} existingRevisionName=${{env.LatestRevision}} appName=${{ secrets.REGISTRY_USERNAME }}-containerapp environmentName=${{ secrets.REGISTRY_USERNAME }}-environment
        failOnStdErr: false
    
     # Deploy Bicep file (new cluster)
    - name: deploy NEW
      #if: github.event.inputs.SKIP_INFRA == 'No'
      uses: azure/arm-deploy@v1
      if: steps.first-deployment.outputs.FirstDeployment != 'false'
      id: deploy-new
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.RG }}
        template: deploy/bicep/container-app-new.bicep
        parameters: image=${{env.ACR_REPO}}:${{ github.event.inputs.IMAGE_TAG }} acrServer=${{ secrets.REGISTRY_LOGIN_SERVER }}    acrPassword=${{ secrets.REGISTRY_PASSWORD }}  acrUsername=${{ secrets.REGISTRY_USERNAME }}  newRevisionNumber=${{ github.run_number }} appName=${{ secrets.REGISTRY_USERNAME }}-containerapp environmentName=${{ secrets.REGISTRY_USERNAME }}-environment
        failOnStdErr: false

    
    

  # check GREEN deployment and witch with BLUE if working
  switch-blue-green:
    name: switch BLUE/GREEN deployment
    runs-on: ubuntu-latest
    needs: deploy-azure-green
    if: needs.deploy-azure-green.outputs.FirstDeployment == 'false'
    environment:
      name: ACA
    
    steps:

    # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ECHO REVISION
      run: echo ${{ needs.deploy-azure-green.outputs.LatestRevision }}

    # only deactivate when another revision exists (after first deployment)
    - name: Replace the BLUE/GREEN traffic and deactivate old version
      uses: azure/CLI@v1
      with:
        azcliversion: 2.35.0
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az containerapp ingress traffic set --name $ACA_NAME -g $RG --traffic-weight latest=100
          
