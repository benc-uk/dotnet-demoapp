#
# Deploy to Azure Kubernetes Service
# Using Helm for parameterized deployment
#

name: CD Release - AKS

on:
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        description: "Image tag to be deployed"
        required: true
        default: "12-04-2022.1352"
      # SKIP_INFRA:
      #   description: "Skip infrastructure deployment in manual triggers"
      #   required: false
      #   default: "No"
  # workflow_run:
  #   workflows:
  #     - "CI Build App"
  #   types:
  #   - completed

# Note. Required secrets: CLUSTER_KUBECONFIG

env:
  CLUSTER_NAME: srewithazureunai-aks-unai
  LOCATION: westeurope
  ACR_NAME: srewithazureunai 
  RG: srewithazureunai
  HELM_RELEASE: dotnet
  HELM_NAMESPACE: demoapps
  # INGRESS_DNS_HOST: dotnet-demoapp.kube.benco.io
  # AD_CLIENT_ID: 3584ac39-1ab1-4fe6-a3dd-4b2fbedc9d7d

jobs:
  #
  # Deploy to Kubernetes (AKS)
  #
  deploy-azure:
    name: Deploy infrastructure to Azure Resource Group
    runs-on: ubuntu-latest
    # environment:
    #   name: AKS
    steps:

    # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy Bicep file
    - name: deploy
      if: github.event.inputs.SKIP_INFRA == 'No'
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
        template: deploy/bicep/main.bicep
        parameters: resourceName=${{env.CLUSTER_NAME}} location=${{env.LOCATION}} dnsPrefix=${{env.CLUSTER_NAME}}-dns workspaceName=${{env.CLUSTER_NAME}}-la acrName=${{env.ACR_NAME}} acrResourceGroup=${{env.RG}}
        failOnStdErr: false

  
  
  configure-aks:
    name: Deploy to AKS with Helm
    needs: deploy-azure
    runs-on: ubuntu-latest
    # environment:
    #   name: AKS - dotnet-demoapp
      # url: https://${{ env.INGRESS_DNS_HOST }}/

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      #az login
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.RG }}

      
      
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace demoapps --dry-run=client -o json
          !!!!!!az aks enable-addons --resource-group $RG --name  --addons http_application_routing
          
      
      - name: "Helm Ingress Install"
        run: |
          REGISTRY_NAME=<REGISTRY_NAME>
          SOURCE_REGISTRY=k8s.gcr.io
          CONTROLLER_IMAGE=ingress-nginx/controller
          CONTROLLER_TAG=v1.0.4
          PATCH_IMAGE=ingress-nginx/kube-webhook-certgen
          PATCH_TAG=v1.1.1
          DEFAULTBACKEND_IMAGE=defaultbackend-amd64
          DEFAULTBACKEND_TAG=1.5
          CERT_MANAGER_REGISTRY=quay.io
          CERT_MANAGER_TAG=v1.5.4
          CERT_MANAGER_IMAGE_CONTROLLER=jetstack/cert-manager-controller
          CERT_MANAGER_IMAGE_WEBHOOK=jetstack/cert-manager-webhook
          CERT_MANAGER_IMAGE_CAINJECTOR=jetstack/cert-manager-cainjector
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          ACR_URL=<REGISTRY_URL>
          helm install nginx-ingress ingress-nginx/ingress-nginx \
          --version 4.0.13 \
          --namespace ingress-basic --create-namespace \
          --set controller.replicaCount=2 \
          --set controller.nodeSelector."kubernetes\.io/os"=linux \
          --set controller.image.registry=$ACR_URL \
          --set controller.image.image=$CONTROLLER_IMAGE \
          --set controller.image.tag=$CONTROLLER_TAG \
          --set controller.image.digest="" \
          --set controller.admissionWebhooks.patch.nodeSelector."kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.patch.image.registry=$ACR_URL \
          --set controller.admissionWebhooks.patch.image.image=$PATCH_IMAGE \
          --set controller.admissionWebhooks.patch.image.tag=$PATCH_TAG \
          --set controller.admissionWebhooks.patch.image.digest="" \
          --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux \
          --set defaultBackend.image.registry=$ACR_URL \
          --set defaultBackend.image.image=$DEFAULTBACKEND_IMAGE \
          --set defaultBackend.image.tag=$DEFAULTBACKEND_TAG \
          --set defaultBackend.image.digest=""
      - name: "Configure Ingress"
        run: |
          $CLUSTER_DNS_ZONE=(az aks show --resource-group $RG --name $mycluster --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
          # take Ip address dynamically and intro RG 
          EXTERNAL_IP=$(kubectl get service --namespace ingress-basic nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')          EXTERNAL_IP=$(kubectl get service --namespace ingress-basic nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          az network dns record-set a add-record --resource-group mc_srewithazureunai_srewithazureunai-aks-unai_westeurope --zone-name $CLUSTER_DNS_ZONE --record-set-name "*" --ipv4-address $EXTERNAL_IP

      #configure cert manager
      - name: "Configure Cert-Manager" 
        run: |
          # Label the ingress-basic namespace to disable resource validation
          kubectl label namespace ingress-basic cert-manager.io/disable-validation=true

          # Add the Jetstack Helm repository
          helm repo add jetstack https://charts.jetstack.io

          # Update your local Helm chart repository cache
          helm repo update

          # Install the cert-manager Helm chart
          helm install cert-manager jetstack/cert-manager \
            --namespace ingress-basic \
            --version $CERT_MANAGER_TAG \
            --set installCRDs=true \
            --set nodeSelector."kubernetes\.io/os"=linux \
            --set image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_CONTROLLER \
            --set image.tag=$CERT_MANAGER_TAG \
            --set webhook.image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_WEBHOOK \
            --set webhook.image.tag=$CERT_MANAGER_TAG \
            --set cainjector.image.repository=$ACR_URL/$CERT_MANAGER_IMAGE_CAINJECTOR \
            --set cainjector.image.tag=$CERT_MANAGER_TAG
      # - name: "Helm release"
      #   run: |
      #     helm repo add benc-uk https://benc-uk.github.io/helm-charts
      #     helm upgrade ${{ env.HELM_RELEASE }} benc-uk/webapp \
      #     --install \
      #     --namespace ${{ env.HELM_NAMESPACE }} \
      #     --values deploy/kubernetes/app.sample.yaml \
      #     --set image.tag=${{ github.event.inputs.IMAGE_TAG }},ingress.host=${{ env.INGRESS_DNS_HOST }}

  # #
  # # Post deployment testing stage
  # #
  # validate-deployment:
  #   name: "Run Deployment Tests"
  #   needs: deploy-aks
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: AKS - dotnet-demoapp
  #     url: https://${{ env.INGRESS_DNS_HOST }}/

  #   steps:
  #     - name: "Checkout"
  #       uses: actions/checkout@v2

  #     - name: "Validate site is running"
  #       run: .github/scripts/url-check.sh -u https://${{ env.INGRESS_DNS_HOST }} -s ".NET" -t 200

  #     - name: "Run API tests"
  #       run: |
  #         npm install newman --silent
  #         node_modules/newman/bin/newman.js run tests/postman_collection.json --global-var apphost=${{ env.INGRESS_DNS_HOST }}
